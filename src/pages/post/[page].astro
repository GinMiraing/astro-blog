---
import Layout from "@/layouts/Layout.astro";
import TitleWithUnderline from "@/components/TitleWithUnderline/index.astro";
import PostCard from "@/components/PostCard/index.astro";
import Navbar from "@/components/Navbar/index.astro";
import { CollectionEntry, getCollection } from "astro:content";
import { ChevronLeft, ChevronRight } from "lucide-react";
import { cn } from "@/lib/utils";

type GetStaticPathsProps = {
  paginate: Function;
};

interface Props {
  page: {
    data: CollectionEntry<"blog">[];
    start: number;
    end: number;
    total: number;
    currentPage: number;
    size: number;
    lastPage: number;
    url: {
      current: string;
      prev: string | undefined;
      next: string | undefined;
    };
  };
}

export async function getStaticPaths({ paginate }: GetStaticPathsProps) {
  const allPosts = await getCollection("blog");
  const reverseAllPosts = allPosts.reverse();
  return paginate(reverseAllPosts, { pageSize: 8 });
}

const { page } = Astro.props;
---

<Layout title={`全部文章 - ${page.currentPage}`}>
  <Navbar />
  <div class="w-full">
    <TitleWithUnderline title="所有文章" />
  </div>
  <div class="grid grid-cols-1 gap-4 last:border-none">
    {
      page.data.map((post) => {
        return <PostCard post={post} />;
      })
    }
  </div>
  <div class="w-full flex items-center justify-between font-medium mt-4">
    <div
      class={cn("hover:text-pink flex items-center transition-colors", {
        invisible: !page.url.prev,
      })}
    >
      <ChevronLeft className="h-4 w-4" />
      <a href={page.url.prev}>上一页</a>
    </div>
    <div
      class={cn("hover:text-pink flex items-center transition-colors", {
        invisible: !page.url.next,
      })}
    >
      <a href={page.url.next}>下一页</a>
      <ChevronRight className="h-4 w-4" />
    </div>
  </div>
</Layout>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const lazyImages = document.querySelectorAll("img.lazyload");
    const lazyImageObserver = new IntersectionObserver((entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          const image = entry.target as HTMLElement;
          image.classList.remove("lazyload");
          image.setAttribute("src", image.dataset.src ? image.dataset.src : "");
          lazyImageObserver.unobserve(image);
        }
      });
    });
    lazyImages.forEach((image) => {
      lazyImageObserver.observe(image);
    });
  });
</script>
