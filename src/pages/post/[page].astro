---
import Layout from "@/layouts/Layout.astro";
import Image from "@/components/Image.astro";
import PostCard from "@/components/PostCard.astro";
import Pagination from "@/components/Pagination.astro";
import { CollectionEntry, getCollection } from "astro:content";
import { ChevronLeft, ChevronRight } from "lucide-react";
import { cn } from "@/lib/utils";
import BannerHeader from "@/components/BannerHeader.astro";

type GetStaticPathsProps = {
  paginate: Function;
};

interface Props {
  page: {
    data: CollectionEntry<"blog">[];
    start: number;
    end: number;
    total: number;
    currentPage: number;
    size: number;
    lastPage: number;
    url: {
      current: string;
      prev: string | undefined;
      next: string | undefined;
    };
  };
}

export async function getStaticPaths({ paginate }: GetStaticPathsProps) {
  const posts = await getCollection("blog");
  const reversePosts = posts.reverse();
  return paginate(reversePosts, { pageSize: 8 });
}

const { page } = Astro.props;
---

<Layout select={1} title={`胤的博客 - 全部文章 - ${page.currentPage}`}>
  <!-- banner -->
  <BannerHeader
    title="全部文章"
    description="『 记录生活中的那些事，那些人 』"
    imgsrc="https://article.biliimg.com/bfs/article/4b48fa534e5845e609e100f6168f54739c383677.png@.webp"
  />
  <!-- post -->
  <div class="grid my-6 grid-cols-1 gap-4 divide-y">
    {
      page.data.map((post) => {
        return <PostCard post={post.data} slug={post.slug} />;
      })
    }
  </div>
  <!-- footer -->
  <Pagination next={page.url.next} prev={page.url.prev} />
</Layout>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const lazyImages = document.querySelectorAll("img.lazyload");
    const lazyImageObserver = new IntersectionObserver((entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          const image = entry.target as HTMLElement;
          image.classList.remove("lazyload");
          image.setAttribute("src", image.dataset.src ? image.dataset.src : "");
          lazyImageObserver.unobserve(image);
        }
      });
    });
    lazyImages.forEach((image) => {
      lazyImageObserver.observe(image);
    });
  });
</script>
